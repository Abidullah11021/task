////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import 'package:task/util/exceptions/message_exception.dart';
import '../../../../../helpers/network_call_helper/network_call_helper.dart';
import '../../../domain/usecases/login.dart';
import '../../../domain/data/auth_remote_datasource.dart';
import '../../../domain/usecases/register.dart';
import '../../../domain/usecases/google_login.dart';
////********** END IMPORTS **********////

@LazySingleton(as: AuthRemoteDataSource)
class AuthRemoteDataSourceImp implements AuthRemoteDataSource {
  final Logger _logger;
  final NetworkCallHelper _networkCallHelper;

  AuthRemoteDataSourceImp({
    required Logger logger,
    required NetworkCallHelper networkCallHelper,
  })  : _logger = logger,
        _networkCallHelper = networkCallHelper;

////********** START METHODS **********////
  @override
  Future<LoginUsecaseOutput> login(LoginUsecaseInput input) async {
    try {
      _logger.i("Fetching doctors with input: $input");

      final response = await _networkCallHelper.loginWithEmail(
          email: input.email, password: input.password);

      _logger.i("Raw response: $response");

      return LoginUsecaseOutput(userCredential: response);
    } on MessageException {
      rethrow;
    } catch (e) {
      throw SomethingWentWrongException();
    }
  }

  /// [RegisterUsecaseInput] is received to [register] method as parameter
  /// [RegisterUsecaseOutput] is returned from [register] method
  @override
  Future<RegisterUsecaseOutput> register(RegisterUsecaseInput input) async {
    try {
      _logger.i("Fetching doctors with input: $input");

      final response = await _networkCallHelper.signUpWithEmail(
        email: input.email,
        password: input.password,
      );

      _logger.i("Raw response: $response");
      return RegisterUsecaseOutput(userCredential: response);
    } on MessageException {
      rethrow;
    } catch (e) {
      throw SomethingWentWrongException();
    }
  }

  /// [GoogleLoginUsecaseInput] is received to [googleLogin] method as parameter
  /// [GoogleLoginUsecaseOutput] is returned from [googleLogin] method
  @override
  Future<GoogleLoginUsecaseOutput> googleLogin(
      GoogleLoginUsecaseInput input) async {
    try {
      _logger.i("Fetching doctors with input: $input");

      final response = await _networkCallHelper.loginWithGoogle();

      _logger.i("Raw response: $response");
      return GoogleLoginUsecaseOutput(userCredential: response);
    } on MessageException {
      rethrow;
    } catch (e) {
      throw SomethingWentWrongException();
    }
  }

////********** END METHODS **********////
}
